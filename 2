#!/bin/bash

###
#
## Don't waste cycles if there's nothing todo
#

###
#
## Set variables
#

# What version do we consider ourselves?
version="1.1"

# Enable colour if we support it
echo test | fgrep test --color 2>&1 > /dev/null
if [ $? -eq 0 ]
then
  colour="--color"
else
  colour=""
fi

# This allows to pass additional options to the proto handler
otherArgs="${@:2}"

# Name ourselves after the executed command
basename=`basename $0`

# This sets the proto handler definitions
transportFile=~/.2-transport

# This is the configuration of the hosts
hostsFile=~/.2

# If transportFile is empty populate with an ssh handler example
if [ ! -s $transportFile ]
then
  echo "###" > $transportFile
  echo "#" >> $transportFile
  echo "## The following example is for ssh. The ssh varialbe defines the proto." >> $transportFile
  echo "## Do not use double quotes as the varialbes used will be evaluated." >> $transportFile
  echo "#" >> $transportFile
  echo "ssh='ssh -i ~/.ssh/\$key -p \$port -l \$user \$host'" >> $transportFile
fi

# If hostsFile is empty populate it with commented out example host entry
if [ ! -s $hostsFile ]
then
  echo "###" > $hostsFile
  echo "#" >> $hostsFile
  echo "## Below is a provided example of an ssh definition" >> $hostsFile
  echo "#" >> $hostsFile
  echo "" >> $hostsFile
  echo "#host=ssh-server.example.tld user=username port=22 proto=ssh key=key_rsa" >> $hostsFile
fi
# Define functions
# Print usage and exit
function usage() {
  echo "basic and most common function"
  echo "  $basename hostname"
  echo "this help message"
  echo "  $basename --help(-h|-?)"
  echo "show known bugs, project goals and version changelog"
  echo "  $basename --bugs(-b)|--goals(-g)|--change(-c)"
  echo
  exit
}

# Print Bugs
function bugs() {
  echo "known bug:"
  echo " * 2 should echo which host it's connecting to"
  echo " * 2 would benefit from using env to find bash"
  echo " * 2 may be dependant on bash3, where bash4 would be ideal to rewrite it"
  echo
}

# Print Goals
function goals() {
  echo "goals:"
  echo " * ssh-agent support"
  echo " * define a default key (or use ssh-agent)"
  echo " * add native git support to poll for updates"
  echo
}

# Print Changelog
function changes() {
  echo "changes:"
  echo " v1.1  3/19/19"
  echo " * added colour to multiple matching list"
  echo " * .2 and .2-transport is created now regardless of argument"
  echo " * if no matches are found the behaviour is to attempt direct connect"
  echo " * added bugs, goals and changelog into the program"
  echo " v1.0  3/ 7/19"
  echo " * initial release"
  echo " * automatically create .2 and .2-transport files"
  echo " * added .2 and .2-transport functionality"
  echo " * added list of multiple matching hosts"
  echo " * added ability choose from multiple maching list"
  echo " * added passing arguments 3 and up to defined transport"
  echo
}

# Check to make sure a host was even given
if [ -z $1 ]
then
  usage
fi

# Let's run some stuffs
case $1 in
  --help|-h|-\?)
    usage
    ;;
  --bugs|--goals|--changes|-b|-g|-c)
    bugs
    goals
    changes
    exit
    ;;
  *)
    ;;
esac

# Change the field seperator to spaces
IFS=" "

# The issue with this is that we want to search only the hosts field
# Get a list of matching hosts entries
matches=`grep '^[[:blank:]]*[^[:blank:]#;]' $hostsFile | fgrep $1`
# Get a count of matching hosts entries
count=`grep '^[[:blank:]]*[^[:blank:]#;]' $hostsFile | fgrep -c $1`

# Check if count has no matches
if [ $count -lt 1 ]
then
  echo "$basename: no matches found. attempting direct connect."
  echo
  ssh $1
  exit
# Check if count has multiple matches
elif [ $count -gt 1 ]
then
  echo "$basename: multiple matches found. please enter for the host."
  echo

  # Change the field seperator to only new lines
  IFS=$(echo -en "\n\b")

  x=1

  # Declare choices to be an array
  choices=()

  # Loop through the matches to present the user with options
  for h in $matches
  do
    # Print the number of the choice
    echo -n $x\ 

    # Print only the hostname not the full argument
    echo $h | grep -o 'host=\S*' | sed 's/host=//' | fgrep $1 $colour

    # Populate the choices array with the choice number as index
    choices[$x]=$h
    x=$((x+1))
  done

  #Get the larget number of bytes to reduce user input
  maxNum=`echo -n $x | wc -c`

  echo
  echo please choose from the above or q to quit

  # Ask the user what host they're trying to connect to
  read -s -n ${maxNum//[[:blank:]]/} choice
  # If we receive q then quit
  if [ $choice = "q" ]
  then
    echo attempting quit
    exit
  fi
  matches=${choices[$choice]}
fi

##
#
## Now that we have found a host
#

# Load the transportFile into the script
source $transportFile

# Set the field seperator back to space
IFS=" "

# Load the variables obtained from the transportFile
declare -x $matches

# This is a tricky one and probably not the best way to do this
# The goal is to populate the proto helper's variables with the
# ones defined in hostsFile
eval eval \$$proto $otherArgs
